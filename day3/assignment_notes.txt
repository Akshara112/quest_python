Different ways of adding elements to a list and to delete elements from a list
In Python, lists are versatile data structures that allow various methods for adding and removing elements.

Adding Elements

Using append()
Adds an element to the end of the list.

my_list = [1, 2, 3]
my_list.append(4)
print(my_list)  # Output: [1, 2, 3, 4]


Using extend()
Adds multiple elements to the end of the list.

my_list = [1, 2, 3]
my_list.extend([4, 5])
print(my_list)  # Output: [1, 2, 3, 4, 5]


Using insert()
Inserts an element at a specific index.

my_list = [1, 2, 3]
my_list.insert(1, 1.5)
print(my_list)  # Output: [1, 1.5, 2, 3]
 
 
Using List Concatenation
Combines lists using the + operator.

my_list = [1, 2, 3]
my_list = my_list + [4, 5]
print(my_list)  # Output: [1, 2, 3, 4, 5]

Using List Comprehension
Creates a new list by applying an expression to each item in an existing list.

my_list = [1, 2, 3]
my_list = [x * 2 for x in my_list]  # Doubling each element
print(my_list)  # Output: [2, 4, 6]




Removing Elements


Using remove()
Removes the first occurrence of a specified value.

my_list = [1, 2, 3, 2]
my_list.remove(2)
print(my_list)  # Output: [1, 3, 2]


Using pop()
Removes and returns an element at a specific index. If no index is specified, it removes and returns the last element.

my_list = [1, 2, 3]
last_element = my_list.pop()
print(my_list)          # Output: [1, 2]
print("Removed:", last_element)  # Output: Removed: 3

my_list = [1, 2, 3]
second_element = my_list.pop(1)
print(my_list)          # Output: [1, 3]
print("Removed:", second_element)  # Output: Removed: 2


Using del
Deletes an element at a specific index or the entire list.

my_list = [1, 2, 3]
del my_list[1]
print(my_list)  # Output: [1, 3]

my_list = [1, 2, 3]
del my_list
# print(my_list)  # This will raise a NameError because the list no longer exists


Using List Comprehension
Creates a new list that excludes certain elements.

my_list = [1, 2, 3, 4, 5]
my_list = [x for x in my_list if x % 2 != 0]  # Remove even numbers
print(my_list)  # Output: [1, 3, 5]


Using clear()
Removes all elements from the list.

my_list = [1, 2, 3]
my_list.clear()
print(my_list)  # Output: []